# Documentación Detallada de Rutas FastAPI (Adapters Input)

Este documento describe exhaustivamente cada endpoint y archivo ubicado en `app/adapters/input/fastapi/routes/`, explicando propósito, lógica, modelos de entrada/salida, validaciones, ejemplos de request/response y relación con los casos de uso y entidades. Es una referencia para desarrolladores y para la integración frontend-backend.

---

## Endpoints y archivos principales

### 1. `student.py`
#### Endpoint: `POST /register/student`
- **Body:**
```json
{
  "name": "Juan Perez",
  "email": "juan.perez@email.com",
  "date_of_birth": "2000-05-10",
  "experience_id": 1,
  "location": "Lima",
  "weekly_availability": 20,
  "preferred_modality": 1,
  "career": "Ingeniería",
  "academic_cycle": 5
}
```
- **Validaciones:** Campos no vacíos, email válido, fecha de nacimiento no futura.
- **Respuesta:**
```json
{
  "id": 1,
  "name": "Juan Perez",
  ...otros campos...
}
```

---

### 2. `company.py`
#### Endpoint: `POST /register/company`
- **Body:**
```json
{
  "RUC": "12345678901",
  "name": "Empresa S.A.",
  "location": "Lima",
  "industry": "Tecnología",
  "area_id": 2,
  "contact_name": "Carlos Pérez",
  "email": "empresa@email.com",
  "company_culture": "Innovación"
}
```
- **Validaciones:** Campos no vacíos, email y RUC únicos.
- **Respuesta:**
```json
{
  "id": 1,
  "RUC": "12345678901",
  ...otros campos...
}
```

---

### 3. `register_app.py`
#### Endpoint: `POST /register/user`
- **Body:**
```json
{
  "email": "juan.perez@email.com",
  "password": "TuContraseñaSegura",
  "role": "student",
  "related_id": 1
}
```
- **Respuesta:**
```json
{
  "id": 1,
  "email": "juan.perez@email.com",
  "role": "student",
  "related_id": 1
}
```

---

### 4. `login_app.py`
#### Endpoint: `POST /login`
- **Body:**
```json
{
  "email": "juan.perez@email.com",
  "password": "TuContraseñaSegura"
}
```
- **Respuesta exitosa:**
```json
{
  "access_token": "...jwt...",
  "token_type": "bearer",
  "role": "student",
  "student_id": 1,
  "student_name": "Juan Perez"
}
```
- **Errores:** 400/401 con mensaje de credenciales incorrectas.

---

### 5. `filter_match.py`
#### Endpoint: `POST /filter_match`
- **Body:**
```json
{
  "student_id": 1,
  "job_offer_id": 2,
  "model_score": 0.95,
  "status": "pending",
  "stage": 1
}
```
- **Respuesta:**
```json
{"message": "FilterMatch creado correctamente"}
```

#### Endpoint: `GET /filter_match/student/{student_id}?stage=1`
- Devuelve todos los matches filtrados para un estudiante y etapa.

#### Endpoint: `GET /filter_match/job_offer/{job_offer_id}?stage=1`
- Devuelve todos los matches filtrados para una oferta y etapa.

---

### 6. `match.py`
#### Endpoint: `GET /matches/ranking`
- Devuelve un ranking de matches entre estudiantes y empresas.
- **Respuesta:**
```json
[
  {
    "student_id": 1,
    "company_id": 2,
    "score": 0.98,
    "student_name": "Juan Perez",
    "company_name": "Empresa S.A."
  },
  ...
]
```

---

### 7. Otros archivos
- `agreement.py`, `matching_input.py`: Plantillas para futuras rutas o lógica extendida.
- `jwt_utils.py`: Utilidades para generación y verificación de JWT y hash de contraseñas.

---

## Notas generales
- Todos los endpoints usan modelos Pydantic para validación estricta.
- El flujo de registro y autenticación está desacoplado: primero se registra la entidad (student/company), luego el usuario (app_user).
- El login solo funciona si el usuario existe en `app_user` y la contraseña es correcta.
- Los endpoints están alineados con los casos de uso y entidades reales.
- Se recomienda consultar la documentación de entidades y casos de uso para detalles de los modelos y lógica interna.
