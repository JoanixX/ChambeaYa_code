# Documentación Detallada de Puertos de la Aplicación (Application Ports)

Este documento describe exhaustivamente cada puerto (interface/abstract class) ubicado en `app/application/ports/`, explicando su propósito, métodos, parámetros y relación con los casos de uso y entidades. Los puertos son fundamentales en la arquitectura hexagonal para desacoplar la lógica de negocio de la infraestructura y facilitar la extensibilidad y testeo.

---

## ¿Qué es un Puerto?
Un puerto es una interfaz abstracta (normalmente una clase abstracta en Python) que define las operaciones que la aplicación necesita para interactuar con el dominio o servicios externos. Permite desacoplar la lógica de negocio de los detalles de implementación.

---

## Puertos implementados y su función

### 1. `register_student_port.py`
**Propósito:** Define el contrato para registrar estudiantes en el sistema.

**Clase:**
```python
class RegisterStudentPort(ABC):
    @abstractmethod
    async def register(self, *, name: str, email: str, date_of_birth, enrollment_date, session):
        pass
```
- **name**: Nombre del estudiante.
- **email**: Correo electrónico único.
- **date_of_birth**: Fecha de nacimiento.
- **enrollment_date**: Fecha de inscripción (si aplica).
- **session**: Sesión de base de datos asíncrona.

**Relación:** Implementado por el caso de uso `RegisterStudentUseCase`, invocado desde el endpoint `/register/student`.

---

### 2. `register_company_port.py`
**Propósito:** Define el contrato para registrar empresas.

**Clase:**
```python
class RegisterCompanyPort(ABC):
    @abstractmethod
    async def register(self, *, name: str, industry: str, contact_name: str, email: str, session):
        pass
```
- **name**: Nombre de la empresa.
- **industry**: Industria o sector.
- **contact_name**: Nombre del contacto principal.
- **email**: Correo electrónico único.
- **session**: Sesión de base de datos asíncrona.

**Relación:** Implementado por el caso de uso `RegisterCompanyUseCase`, invocado desde el endpoint `/register/company`.

---

### 3. Otros puertos definidos

Los siguientes archivos existen como puertos para futuras extensiones o para mantener la arquitectura limpia, aunque actualmente pueden estar vacíos o ser implementados en el futuro:
- `add_student_experience_port.py`: Para agregar experiencia a un estudiante.
- `assign_interests_to_student_port.py`: Para asignar intereses a un estudiante.
- `assign_skills_to_student_port.py`: Para asignar habilidades a un estudiante.
- `create_match_port.py`: Para la lógica de creación de matches.
- `prepare_matching_input_port.py`: Para preparar los datos de entrada al sistema de matching.
- `register_agreement_port.py`: Para registrar acuerdos entre empresa y estudiante.
- `run_filter_match_port.py`: Para ejecutar el filtrado de matches.

**Nota:** Aunque algunos puertos están vacíos, su presencia es clave para mantener la extensibilidad y claridad de la arquitectura hexagonal.

---

## Relación con Casos de Uso y Endpoints
- Los casos de uso implementan estos puertos y son invocados por los endpoints de FastAPI.
- Permiten cambiar la implementación (por ejemplo, de base de datos o lógica de negocio) sin afectar el resto del sistema.

---

**Resumen:**
- Los puertos definen contratos claros y desacoplados.
- Facilitan la mantenibilidad, pruebas y escalabilidad del sistema.
- Su uso es fundamental para la arquitectura hexagonal aplicada en este proyecto.
