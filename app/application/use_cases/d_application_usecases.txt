# Documentación de Casos de Uso de la Aplicación

Este documento describe la función, lógica, fragmentos de código y relación con los endpoints de los archivos en `app/application/use_cases/`. Es una referencia para desarrolladores que deseen comprender los procesos principales (casos de uso) que orquestan la lógica de negocio de la aplicación.

---

## 1. Casos de Uso Implementados

### `register_company.py`
Implementa el caso de uso para registrar una nueva empresa en la plataforma. Recibe los datos principales de la empresa, crea una instancia de la entidad `Company` y la persiste en la base de datos usando una sesión asíncrona de SQLAlchemy.

**Fragmento de código:**
```python
class RegisterCompanyUseCase(RegisterCompanyPort):
    async def register(self, *, name, tax_id, industry, ... , session):
        new_company = Company(name=name, tax_id=tax_id, industry=industry, ...)
        session.add(new_company)
        await session.commit()
        await session.refresh(new_company)
        return new_company
```

**Funcionalidad:**
- Orquesta el proceso de registro de empresas.
- Es invocado por el endpoint `POST /companies/register`.

---

### `register_student.py`
Implementa el caso de uso para registrar un nuevo estudiante. Recibe los datos principales del estudiante, crea una instancia de la entidad `Student` y la guarda en la base de datos. Incluye manejo de fechas y validaciones básicas.

**Fragmento de código:**
```python
class RegisterStudentUseCase(RegisterStudentPort):
    async def register(self, *, name, email, date_of_birth, ..., session):
        new_student = Student(name=name, email=email, date_of_birth=date_of_birth, ...)
        session.add(new_student)
        await session.commit()
        await session.refresh(new_student)
        return new_student
```

**Funcionalidad:**
- Orquesta el proceso de registro de estudiantes.
- Es invocado por el endpoint `POST /students/register`.

---

## 2. Casos de Uso Definidos (Archivos Vacíos)
Los siguientes archivos están preparados para implementar casos de uso específicos, pero actualmente no contienen lógica. Se espera que cada uno orqueste procesos clave del dominio:
- `add_student_experience.py`: Agregar experiencia a un estudiante.
- `assign_courses_to_student.py`: Asignar cursos a un estudiante.
- `assign_interests_to_student.py`: Asignar intereses a un estudiante.
- `assign_skills_to_student.py`: Asignar habilidades a un estudiante.
- `create_match.py`: Crear un match entre empresa y estudiante.
- `prepare_matching_input.py`: Preparar los datos de entrada para el proceso de matching.
- `register_agreement.py`: Registrar un acuerdo entre empresa y estudiante.
- `run_company_filter_stage1.py` y `run_company_filter_stage2.py`: Ejecutar etapas de filtrado de empresas.
- `run_student_filter_stage1.py` y `run_student_filter_stage2.py`: Ejecutar etapas de filtrado de estudiantes.

---

### Notas Generales
- Los casos de uso implementados siguen el patrón de orquestación de lógica de negocio, separando la lógica de aplicación de la infraestructura y el dominio.
- Cada caso de uso implementado es invocado por un endpoint específico y utiliza entidades y puertos definidos en el dominio y la aplicación.
- Se recomienda mantener este documento actualizado conforme se implementen nuevos casos de uso o se modifiquen los existentes.

> **Recomendación:** Documentar cada caso de uso implementado con su propósito, entradas, salidas y reglas de negocio relevantes.
