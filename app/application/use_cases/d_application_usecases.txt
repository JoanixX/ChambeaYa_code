# Documentación Detallada de Casos de Uso de la Aplicación

Este documento describe exhaustivamente cada caso de uso ubicado en `app/application/use_cases/`, explicando su propósito, lógica, parámetros, relación con los puertos, entidades y endpoints. Los casos de uso orquestan la lógica de negocio y son el punto de entrada para las operaciones principales del sistema.

---

## ¿Qué es un Caso de Uso?
Un caso de uso es una clase que implementa un puerto (interface) y define la lógica para una operación específica del sistema (por ejemplo, registrar un estudiante, crear un match, etc.).

---

## Casos de Uso Implementados

### 1. `register_student.py`
**Propósito:** Registrar un nuevo estudiante en la base de datos.

**Clase:**
```python
class RegisterStudentUseCase(RegisterStudentPort):
    async def register(self, *, name, email, date_of_birth, experience_id, location, weekly_availability, preferred_modality, career, academic_cycle, session):
        ...
```
- **name**: Nombre del estudiante.
- **email**: Correo electrónico único.
- **date_of_birth**: Fecha de nacimiento.
- **experience_id**: ID de experiencia previa.
- **location**: Ubicación.
- **weekly_availability**: Horas disponibles por semana.
- **preferred_modality**: Modalidad preferida.
- **career**: Carrera universitaria.
- **academic_cycle**: Ciclo académico actual.
- **session**: Sesión de base de datos asíncrona.

**Relación:** Implementa el puerto `RegisterStudentPort`. Usado por el endpoint `/register/student`.

---

### 2. `register_company.py`
**Propósito:** Registrar una nueva empresa en la base de datos.

**Clase:**
```python
class RegisterCompanyUseCase(RegisterCompanyPort):
    async def register(self, *, RUC, name, location, industry, area_id, contact_name, email, company_culture, session):
        ...
```
- **RUC**: Registro Único de Contribuyente.
- **name**: Nombre de la empresa.
- **location**: Ubicación.
- **industry**: Industria o sector.
- **area_id**: ID de área principal.
- **contact_name**: Nombre del contacto.
- **email**: Correo electrónico único.
- **company_culture**: Cultura organizacional.
- **session**: Sesión de base de datos asíncrona.

**Relación:** Implementa el puerto `RegisterCompanyPort`. Usado por el endpoint `/register/company`.

---

## Casos de Uso Definidos para Extensión

Los siguientes archivos existen como plantillas para futuros casos de uso o para mantener la arquitectura limpia, aunque actualmente pueden estar vacíos:
- `add_student_experience.py`: Para agregar experiencia a un estudiante.
- `assign_interests_to_student.py`: Para asignar intereses a un estudiante.
- `assign_skills_to_student.py`: Para asignar habilidades a un estudiante.
- `create_match.py`: Para la lógica de creación de matches.
- `prepare_matching_input.py`: Para preparar los datos de entrada al sistema de matching.
- `register_agreement.py`: Para registrar acuerdos entre empresa y estudiante.
- `run_filter_match.py`: Para ejecutar el filtrado de matches.

**Nota:** Aunque algunos casos de uso están vacíos, su presencia es clave para mantener la extensibilidad y claridad de la arquitectura hexagonal.

---

## Relación con Puertos y Endpoints
- Cada caso de uso implementa un puerto definido en `app/application/ports/`.
- Son invocados por los endpoints de FastAPI y orquestan la lógica de negocio.
- Permiten mantener la lógica desacoplada y fácilmente testeable.

---

**Resumen:**
- Los casos de uso son el núcleo de la lógica de aplicación.
- Su diseño permite escalar y mantener el sistema de forma robusta y flexible.
